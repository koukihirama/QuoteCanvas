<% style_bg   = passage.customization&.bg_color.presence   || passage.bg_color.presence    || "#F9FAFB" %>
<% style_text = passage.customization&.color.presence      || passage.text_color.presence  || "#111827" %>
<% style_font = passage.customization&.font.presence       || passage.font_family.presence || "var(--font-serif)" %>


<%= form_with model: passage,
              local: true,
              html: { id: "passage-form", autocomplete: "off" },
              class: "space-y-6" do |f| %>

  <% if passage.errors.any? %>
    <div class="alert alert-error">
      <span>入力にエラーがあるよ（<%= passage.errors.count %>件）</span>
      <ul class="list-disc pl-5">
        <% passage.errors.full_messages.each do |m| %>
          <li><%= m %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <%# ====== 2カラム（md以上で分割 / スマホは1カラム） ====== %>
  <div class="grid gap-6 md:grid-cols-2 items-start">
    <%# ================= 左：入力カラム ================= %>
    <div class="space-y-6">

      <!-- 本文 -->
      <div>
        <%= f.label :content, "一節本文", class: "block font-semibold mb-1" %>
        <%= f.text_area :content, rows: 5,
              class: "textarea textarea-bordered w-full",
              data: { preview_target: "content" } %>
      </div>

      <!-- タイトル / 著者 -->
      <div class="grid gap-4 md:grid-cols-2">
        <div>
          <%= f.label :title, "作品タイトル", class: "block font-semibold mb-1" %>
          <%= f.text_field :title,
                class: "input input-bordered w-full",
                data: { preview_target: "title" } %>
        </div>
        <div>
          <%= f.label :author, "著者", class: "block font-semibold mb-1" %>
          <%= f.text_field :author,
                class: "input input-bordered w-full",
                data: { preview_target: "author" } %>
        </div>
      </div>

      <!-- 見た目のカスタマイズ（簡易） -->
      <details class="collapse collapse-arrow bg-base-200 mt-2">
        <summary class="collapse-title font-semibold">見た目のカスタマイズ（簡易）</summary>
        <div class="collapse-content grid gap-4 md:grid-cols-3">
          <%= f.fields_for :customization do |c| %>
            <%= c.hidden_field :id if c.object&.persisted? %>

            <!-- フォント -->
            <div>
              <%= c.label :font, "フォント", class: "block font-semibold mb-1" %>
              <div class="flex gap-2 mb-2">
                <% [["Serif","var(--font-serif)"],["Sans","var(--font-sans)"],["Mono","var(--font-mono)"]].each do |label, val| %>
                  <button type="button" class="btn btn-xs" data-quick-font="<%= val %>"><%= label %></button>
                <% end %>
              </div>
              <%= c.select :font,
                    options_for_select([
                      ["標準（Serif）", "var(--font-serif)"],
                      ["標準（Sans）",  "var(--font-sans)"],
                      ["等幅（Mono）",  "var(--font-mono)"]
                    ], c.object&.font),
                    { include_blank: "（未選択 = 既定）" },
                    class: "select select-bordered w-full",
                    data: { preview_target: "font" } %>
            </div>

            <!-- 文字色 -->
            <div>
              <%= c.label :color, "文字色 (#RRGGBB / #RGB)", class: "block font-semibold mb-1" %>
              <div class="flex items-center gap-2">
                <%= c.text_field :color,
                      class: "input input-bordered w-full",
                      placeholder: "#111827",
                      pattern: "#(?:[0-9a-fA-F]{3}|[0-9a-fA-F]{6})",
                      title: "#RRGGBB 形式で入力してね（例: #111827）",
                      data: { preview_target: "textColor" } %>
                <input type="color" class="input w-12 p-0"
                       value="<%= (c.object&.color.presence || passage.customization&.color.presence || passage.text_color.presence || '#111827') %>"
                       data-colorpicker="textColor" />
              </div>
              <div class="flex flex-wrap gap-2 mt-2">
                <% [["#111827","濃いグレー"],["#1F2937","Gray-800"],["#374151","Gray-700"],["#000000","Black"]].each do |hex, name| %>
                  <button type="button" class="btn btn-xs" title="<%= name %>"
                          data-color-preset="textColor" data-value="<%= hex %>">
                    <span class="inline-block size-3 rounded-full mr-1" style="background:<%= hex %>"></span><%= name %>
                  </button>
                <% end %>
                <button type="button" class="btn btn-xs" data-clear-color="textColor">未指定に戻す</button>
                <button type="button" class="btn btn-xs" data-pick-current="textColor">現在色を拾う</button>
              </div>
              <div class="flex items-center gap-2 mt-2">
                <span class="badge">HEX</span>
                <div class="flex gap-1" data-recent="textColor"></div>
              </div>
            </div>

            <!-- 背景色 -->
            <div>
              <%= c.label :bg_color, "背景色 (#RRGGBB / #RGB)", class: "block font-semibold mb-1" %>
              <div class="flex items-center gap-2">
                <%= c.text_field :bg_color,
                      class: "input input-bordered w-full",
                      placeholder: "#F9FAFB",
                      pattern: "#(?:[0-9a-fA-F]{3}|[0-9a-fA-F]{6})",
                      title: "#RRGGBB 形式で入力してね（例: #F9FAFB）",
                      data: { preview_target: "bgColor" } %>
                <input type="color" class="input w-12 p-0"
                       value="<%= (c.object&.bg_color.presence || passage.customization&.bg_color.presence || passage.bg_color.presence || '#F9FAFB') %>"
                       data-colorpicker="bgColor" />
              </div>
              <div class="flex flex-wrap gap-2 mt-2">
                <% [["#F9FAFB","ほぼ白"],["#F3F4F6","Gray-100"],["#E5E7EB","Gray-200"],["#FFFFFF","White"]].each do |hex, name| %>
                  <button type="button" class="btn btn-xs" title="<%= name %>"
                          data-color-preset="bgColor" data-value="<%= hex %>">
                    <span class="inline-block size-3 rounded-full mr-1 border" style="background:<%= hex %>"></span><%= name %>
                  </button>
                <% end %>
                <button type="button" class="btn btn-xs" data-clear-color="bgColor">未指定に戻す</button>
                <button type="button" class="btn btn-xs" data-pick-current="bgColor">現在色を拾う</button>
              </div>
              <div class="flex items-center gap-2 mt-2">
                <span class="badge">HEX</span>
                <div class="flex gap-1" data-recent="bgColor"></div>
              </div>
            </div>
          <% end %>
        </div>
      </details>

      <!-- 詳細設定ページへの導線 -->
      <div class="mt-2">
        <% if passage.persisted? %>
          <% if passage.customization.present? %>
            <%= link_to "見た目をカスタマイズ（詳細設定）",
                  edit_passage_customization_path(passage),
                  class: "btn btn-outline" %>
          <% else %>
            <%= link_to "見た目をカスタマイズ（詳細設定）",
                  new_passage_customization_path(passage),
                  class: "btn btn-outline" %>
          <% end %>
        <% else %>
          <button class="btn btn-outline" disabled>見た目をカスタマイズ（詳細設定）</button>
          <p class="text-xs opacity-70 mt-1">※ まず本文を保存してから詳細カスタマイズできるよ</p>
        <% end %>
      </div>

      <!-- 送信ボタン -->
      <div class="flex gap-2">
        <%= f.submit (passage.persisted? ? "更新する" : "保存する"), class: "btn btn-primary" %>
        <%= link_to "キャンセル",
              (passage.persisted? ? passage_path(passage) : dashboard_path),
              class: "btn btn-ghost" %>
      </div>
    </div>

    <%# ================= 右：PC用 sticky プレビュー ================= %>

    <div class="hidden md:block md:sticky md:top-24">
      <div class="mb-2">
        <h2 class="text-xl font-bold gh-underline">プレビュー</h2>
        <p class="text-sm opacity-70">入力に合わせて自動更新</p>
      </div>

      <div id="preview-card-desktop"
           class="relative rounded-2xl p-6 border gh-glass"
           style="background:<%= style_bg %>; color:<%= style_text %>; font-family:<%= style_font %>;">
        <div class="absolute inset-0 gh-grain pointer-events-none rounded-2xl"></div>

        <div id="preview-meta-desktop" class="text-[11px] opacity-70 mb-1 font-sans">
          <% meta = [f.object.author.presence, f.object.title.presence&.yield_self { |t| "『#{t}』" }].compact.join(" ") %>
          <%= meta %>
        </div>
        <div id="preview-content-desktop"
             class="text-lg md:text-2xl font-semibold leading-relaxed whitespace-pre-wrap"></div>
      </div>
    </div>
  </div>
<% end %>

<%# ================= モバイル用：下固定ミニプレビューバー ================= %>
<div class="md:hidden fixed inset-x-0 bottom-0 z-40">
  <div class="mx-auto max-w-7xl px-4" style="padding-bottom: env(safe-area-inset-bottom);">
    <div class="rounded-xl border gh-glass p-3 shadow-lg backdrop-blur">
      <div id="preview-card-mobile"
           class="rounded-lg p-3"
           style="background:<%= style_bg %>; color:<%= style_text %>; font-family:<%= style_font %>; max-height: 28vh; overflow:auto;">
        <div class="text-[10px] opacity-70 mb-1 font-sans" id="preview-meta-mobile"></div>
        <div class="text-base font-semibold leading-relaxed whitespace-pre-wrap" id="preview-content-mobile"></div>
      </div>
      <div class="mt-2 flex justify-end">
        <button type="button" class="btn btn-xs" id="toggle-mobile-preview">展開/収納</button>
      </div>
    </div>
  </div>
</div>
<%# モバイルで固定バーに隠れないよう余白を確保 %>
<div class="h-28 md:hidden"></div>

<%# ================= プレビュー反映スクリプト（PC/モバイル対応） ================= %>
<script>
(function(){
  const form = document.getElementById("passage-form") || document.querySelector("form");
  if (!form) return;

  // 入力
  const title  = form.querySelector('[data-preview-target="title"]');
  const author = form.querySelector('[data-preview-target="author"]');
  const body   = form.querySelector('[data-preview-target="content"]');
  const fontSel= form.querySelector('[data-preview-target="font"]');
  const textInp= form.querySelector('[data-preview-target="textColor"]');
  const bgInp  = form.querySelector('[data-preview-target="bgColor"]');
  const textPick = form.querySelector('input[data-colorpicker="textColor"]');
  const bgPick   = form.querySelector('input[data-colorpicker="bgColor"]');

  // PC
  const cardD = document.getElementById('preview-card-desktop');
  const metaD = document.getElementById('preview-meta-desktop');
  const contD = document.getElementById('preview-content-desktop');

  // モバイル
  const cardM = document.getElementById('preview-card-mobile');
  const metaM = document.getElementById('preview-meta-mobile');
  const contM = document.getElementById('preview-content-mobile');

  const anyCard = cardD || cardM;
  const FALLBACK = {
    font: anyCard?.style.fontFamily || "var(--font-serif)",
    text: anyCard?.style.color      || "#111827",
    bg:   anyCard?.style.background || "#F9FAFB"
  };

  function setCardStyle(el){
    if (!el) return;
    el.style.fontFamily = (fontSel?.value?.trim() || FALLBACK.font);
    el.style.color      = (textInp?.value?.trim() || FALLBACK.text);
    el.style.background = (bgInp?.value?.trim()   || FALLBACK.bg);
  }

  function updateMeta(){
    const a = (author?.value || "").trim();
    const t = (title?.value  || "").trim();
    const meta = [a, t ? `『${t}』` : null].filter(Boolean).join(" ");
    if (metaD) metaD.textContent = meta;
    if (metaM) metaM.textContent = meta;
  }

  function updateBody(){
    const v = (body?.value || "");
    if (contD) contD.textContent = v;
    if (contM) contM.textContent = v;
  }

  function applyStyleBoth(){
    setCardStyle(cardD);
    setCardStyle(cardM);
  }

  // ピッカー <-> テキスト 双方向同期
  function bindPair(textInput, colorInput){
    if (!textInput || !colorInput) return;
    colorInput.addEventListener("input", e => {
      textInput.value = e.target.value;
      applyStyleBoth();
    });
    textInput.addEventListener("input", e => {
      if (/^#/.test(e.target.value)) colorInput.value = e.target.value;
      applyStyleBoth();
    });
  }

  // クイックフォント
  form.querySelectorAll('[data-quick-font]').forEach(btn => {
    btn.addEventListener("click", () => {
      if (!fontSel) return;
      fontSel.value = btn.dataset.quickFont;
      fontSel.dispatchEvent(new Event("change"));
    });
  });

  // プリセット色・未指定・現在色
  function rgbToHex(rgb) {
    const m = rgb.match(/\d+/g);
    if (!m) return "";
    return "#" + m.slice(0, 3).map(n => ("0" + parseInt(n, 10).toString(16)).slice(-2)).join("");
  }

  function saveRecent(inputEl, hex) {
    if (!hex || !hex.startsWith("#")) return;
    const key = inputEl === textInp ? "recent_text" : "recent_bg";
    const arr = JSON.parse(localStorage.getItem(key) || "[]").filter(v => v !== hex);
    arr.unshift(hex);
    localStorage.setItem(key, JSON.stringify(arr.slice(0, 8)));
    renderRecent();
  }

  function renderRecent() {
    const wrapText = form.querySelector('[data-recent="textColor"]');
    const wrapBg   = form.querySelector('[data-recent="bgColor"]');

    const make = (hex, key) => {
      const b = document.createElement("button");
      b.type = "button"; b.title = hex;
      b.className = "size-6 rounded-full border";
      b.style.background = hex;
      b.dataset.colorPreset = key;
      b.dataset.value = hex;
      b.addEventListener("click", () => {
        const text = key === "textColor" ? textInp : bgInp;
        const pick = key === "textColor" ? textPick : bgPick;
        if (text) text.value = hex;
        if (pick) pick.value = hex;
        applyStyleBoth(); saveRecent(text, hex);
      });
      return b;
    };

    if (wrapText) {
      wrapText.innerHTML = "";
      (JSON.parse(localStorage.getItem("recent_text") || "[]"))
        .forEach(hex => wrapText.appendChild(make(hex, "textColor")));
    }
    if (wrapBg) {
      wrapBg.innerHTML = "";
      (JSON.parse(localStorage.getItem("recent_bg") || "[]"))
        .forEach(hex => wrapBg.appendChild(make(hex, "bgColor")));
    }
  }

  form.querySelectorAll('[data-color-preset]').forEach(btn => {
    btn.addEventListener("click", (e) => {
      const key = e.currentTarget.dataset.colorPreset;
      const val = e.currentTarget.dataset.value;
      const text = key === "textColor" ? textInp : bgInp;
      const pick = key === "textColor" ? textPick : bgPick;
      if (text) text.value = val;
      if (pick) pick.value = val;
      applyStyleBoth(); saveRecent(text, val);
    });
  });
  form.querySelectorAll('[data-clear-color]').forEach(btn => {
    btn.addEventListener("click", (e) => {
      const key = e.currentTarget.dataset.clearColor;
      const text = key === "textColor" ? textInp : bgInp;
      if (text) text.value = "";
      applyStyleBoth();
    });
  });
  form.querySelectorAll('[data-pick-current]').forEach(btn => {
    btn.addEventListener("click", (e) => {
      const key = e.currentTarget.dataset.pickCurrent;
      const text = key === "textColor" ? textInp : bgInp;
      const prop = key === "textColor" ? "color" : "backgroundColor";
      const val = (cardD || cardM) ? rgbToHex(getComputedStyle(cardD || cardM)[prop]) : "";
      if (text && val) text.value = val;
      const pick = key === "textColor" ? textPick : bgPick;
      if (pick) pick.value = val;
      applyStyleBoth(); saveRecent(text, val);
    });
  });

  // イベント
  [title, author].forEach(el => el && el.addEventListener("input", updateMeta));
  body && body.addEventListener("input", updateBody);
  fontSel && fontSel.addEventListener("change", applyStyleBoth);
  bindPair(textInp, textPick);
  bindPair(bgInp, bgPick);

  // 初期反映
  updateMeta(); updateBody(); applyStyleBoth(); renderRecent();

  // モバイル：展開/収納（任意）
  const toggleBtn = document.getElementById('toggle-mobile-preview');
  if (toggleBtn && cardM){
    let expanded = true;
    toggleBtn.addEventListener('click', () => {
      expanded = !expanded;
      cardM.style.maxHeight = expanded ? '28vh' : '10vh';
      cardM.style.overflow  = 'auto';
    });
  }
})();
</script>