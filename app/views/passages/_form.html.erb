<%# ====== 色・フォントの初期スタイル ====== %>
<% style_bg   = passage.customization&.bg_color.presence   || passage.bg_color.presence    || "#F9FAFB" %>
<% style_text = passage.customization&.color.presence      || passage.text_color.presence  || "#111827" %>
<% style_font = passage.customization&.font.presence       || passage.font_family.presence || "var(--font-serif)" %>

<%= form_with model: passage,
      local: true,
      html: {
        id: "passage-form",
        autocomplete: "off",
        data: {
          controller: "book-search",
          action: "submit->book-search#mirrorToHidden turbo:submit-start->book-search#mirrorToHidden"
        }
      },
      class: "space-y-6" do |f| %>

  <%= render "shared/form_errors", object: f.object %>

  <%# ====== 2カラム（md以上で分割 / スマホは1カラム） ====== %>
  <div class="grid gap-6 md:grid-cols-2 items-start">
    <%# ================= 左：入力カラム ================= %>
    <div class="space-y-6">
      <!-- 本文 -->
      <div>
        <%= f.label :content, "一節本文", class: "block font-semibold mb-1" %>
        <%= f.text_area :content, rows: 5,
              class: "textarea textarea-bordered w-full",
              data: { preview_target: "content" } %>
      </div>

      <!-- タイトル / 著者 -->
      <div class="grid gap-4 md:grid-cols-2">
        <div>
          <%= f.label :title, "作品タイトル", class: "block font-semibold mb-1" %>
          <%= f.text_field :title,
                class: "input input-bordered w-full",
                data: {
                  preview_target: "title",
                  action: "input->book-search#trySuggest",
                  "book-search-target": "title"
                } %>
        </div>
        <div>
          <%= f.label :author, "著者", class: "block font-semibold mb-1" %>
          <%= f.text_field :author,
                class: "input input-bordered w-full",
                data: {
                  preview_target: "author",
                  action: "input->book-search#trySuggest",
                  "book-search-target": "author"
                } %>
        </div>
      </div>

      <!-- 書籍検索アクション（モーダル／クリア）＋ ISBN -->
      <div class="flex flex-col gap-2">
        <div class="flex gap-2">
          <button type="button"
                  class="btn btn-outline btn-sm"
                  data-action="click->book-search#open">🔎 書籍を検索してセット</button>
          <button type="button"
                  class="btn btn-ghost btn-sm"
                  data-action="click->book-search#clear">クリア</button>
        </div>

        <div class="max-w-xs">
          <label class="label"><span class="label-text text-xs">ISBN（任意。入力で候補表示）</span></label>
          <%= f.fields_for :book_info do |bf| %>
            <%= bf.text_field :isbn,
                  class: "input input-bordered w-full",
                  placeholder: "9784041026229",
                  data: { action: "input->book-search#trySuggest",
                          "book-search-target": "isbn" } %>
          <% end %>
        </div>
      </div>

      <%# インライン候補表示 %>
      <div class="mt-2" data-book-search-target="inlineResults"></div>

      <!-- 見た目のカスタマイズ（簡易） -->
      <details class="collapse collapse-arrow bg-base-200 mt-2">
        <summary class="collapse-title font-semibold">見た目のカスタマイズ（簡易）</summary>
        <div class="collapse-content grid gap-4 md:grid-cols-3">
          <%= f.fields_for :customization do |c| %>
            <%= c.hidden_field :id if c.object&.persisted? %>

            <!-- フォント -->
            <div>
              <%= c.label :font, "フォント", class: "block font-semibold mb-1" %>
              <div class="flex gap-2 mb-2">
                <% [["Serif","var(--font-serif)"],["Sans","var(--font-sans)"],["Mono","var(--font-mono)"]].each do |label, val| %>
                  <button type="button" class="btn btn-xs" data-quick-font="<%= val %>"><%= label %></button>
                <% end %>
              </div>
              <%= c.select :font,
                    options_for_select([
                      ["標準（Serif）", "var(--font-serif)"],
                      ["標準（Sans）",  "var(--font-sans)"],
                      ["等幅（Mono）",  "var(--font-mono)"]
                    ], c.object&.font),
                    { include_blank: "（未選択 = 既定）" },
                    class: "select select-bordered w-full",
                    data: { preview_target: "font" } %>
            </div>

            <!-- 文字色 -->
            <div>
              <%= c.label :color, "文字色 (#RRGGBB / #RGB)", class: "block font-semibold mb-1" %>
              <div class="flex items-center gap-2">
                <%= c.text_field :color,
                      class: "input input-bordered w-full",
                      placeholder: "#111827",
                      pattern: "#(?:[0-9a-fA-F]{3}|[0-9a-fA-F]{6})",
                      title: "#RRGGBB 形式で入力してね（例: #111827）",
                      data: { preview_target: "textColor" } %>
                <input type="color" class="input w-12 p-0"
                       value="<%= (c.object&.color.presence || passage.customization&.color.presence || passage.text_color.presence || '#111827') %>"
                       data-colorpicker="textColor" />
              </div>
              <div class="flex flex-wrap gap-2 mt-2">
                <% [["#111827","濃いグレー"],["#1F2937","Gray-800"],["#374151","Gray-700"],["#000000","Black"]].each do |hex, name| %>
                  <button type="button" class="btn btn-xs" title="<%= name %>"
                          data-color-preset="textColor" data-value="<%= hex %>">
                    <span class="inline-block size-3 rounded-full mr-1" style="background:<%= hex %>"></span><%= name %>
                  </button>
                <% end %>
                <button type="button" class="btn btn-xs" data-clear-color="textColor">未指定に戻す</button>
                <button type="button" class="btn btn-xs" data-pick-current="textColor">現在色を拾う</button>
              </div>
              <div class="flex items-center gap-2 mt-2">
                <span class="badge">HEX</span>
                <div class="flex gap-1" data-recent="textColor"></div>
              </div>
            </div>

            <!-- 背景色 -->
            <div>
              <%= c.label :bg_color, "背景色 (#RRGGBB / #RGB)", class: "block font-semibold mb-1" %>
              <div class="flex items-center gap-2">
                <%= c.text_field :bg_color,
                      class: "input input-bordered w-full",
                      placeholder: "#F9FAFB",
                      pattern: "#(?:[0-9a-fA-F]{3}|[0-9a-fA-F]{6})",
                      title: "#RRGGBB 形式で入力してね（例: #F9FAFB）",
                      data: { preview_target: "bgColor" } %>
                <input type="color" class="input w-12 p-0"
                       value="<%= (c.object&.bg_color.presence || passage.customization&.bg_color.presence || passage.bg_color.presence || '#F9FAFB') %>"
                       data-colorpicker="bgColor" />
              </div>
              <div class="flex flex-wrap gap-2 mt-2">
                <% [["#F9FAFB","ほぼ白"],["#F3F4F6","Gray-100"],["#E5E7EB","Gray-200"],["#FFFFFF","White"]].each do |hex, name| %>
                  <button type="button" class="btn btn-xs" title="<%= name %>"
                          data-color-preset="bgColor" data-value="<%= hex %>">
                    <span class="inline-block size-3 rounded-full mr-1 border" style="background:<%= hex %>"></span><%= name %>
                  </button>
                <% end %>
                <button type="button" class="btn btn-xs" data-clear-color="bgColor">未指定に戻す</button>
                <button type="button" class="btn btn-xs" data-pick-current="bgColor">現在色を拾う</button>
              </div>
              <div class="flex items-center gap-2 mt-2">
                <span class="badge">HEX</span>
                <div class="flex gap-1" data-recent="bgColor"></div>
              </div>
            </div>
          <% end %>
        </div>
      </details>

      <!-- BookInfo（保存用 hidden と公開したい項目） -->
      <%= f.fields_for :book_info do |bf| %>
        <%= bf.hidden_field :id if bf.object&.persisted? %>
        <%= bf.hidden_field :title,          data: { "book-search-target": "title" } %>
        <%= bf.hidden_field :author,         data: { "book-search-target": "author" } %>
        <%= bf.hidden_field :published_date, data: { "book-search-target": "publishedDate" } %>
        <%= bf.hidden_field :cover_url,      data: { "book-search-target": "coverUrl" } %>
        <%= bf.hidden_field :publisher,      data: { "book-search-target": "publisher" } %>
        <%= bf.hidden_field :page_count,     data: { "book-search-target": "pageCount" } %>
        <%= bf.hidden_field :source,         data: { "book-search-target": "source" } %>
        <%= bf.hidden_field :source_id,      data: { "book-search-target": "sourceId" } %>
      <% end %>

      <!-- 詳細設定ページへの導線 -->
      <div class="mt-2">
        <% if passage.persisted? %>
          <% if passage.customization.present? %>
            <%= link_to "見た目をカスタマイズ（詳細設定）", edit_passage_customization_path(passage), class: "btn btn-outline" %>
          <% else %>
            <%= link_to "見た目をカスタマイズ（詳細設定）", new_passage_customization_path(passage), class: "btn btn-outline" %>
          <% end %>
        <% else %>
          <button class="btn btn-outline" disabled>見た目をカスタマイズ（詳細設定）</button>
          <p class="text-xs opacity-70 mt-1">※ まず本文を保存してから詳細カスタマイズできるよ</p>
        <% end %>
      </div>

      <!-- 送信ボタン -->
      <div class="flex gap-2">
        <%= f.submit (passage.persisted? ? "更新する" : "保存する"), class: "btn btn-primary" %>
        <%= link_to "キャンセル",
              (passage.persisted? ? passage_path(passage) : dashboard_path),
              class: "btn btn-ghost" %>
      </div>
    </div>

    <%# ================= 右：PC用 sticky プレビュー ================= %>
    <aside class="hidden md:block md:sticky md:top-24">
      <div class="mb-2">
        <h2 class="text-xl font-bold gh-underline">プレビュー</h2>
        <p class="text-sm opacity-70">入力に合わせて自動更新</p>
      </div>

      <div id="preview-card-desktop"
           class="relative rounded-2xl p-6 border gh-glass"
           style="background:<%= style_bg %>; color:<%= style_text %>; font-family:<%= style_font %>;">
        <div class="absolute inset-0 gh-grain pointer-events-none rounded-2xl"></div>
        <div id="preview-meta-desktop" class="text-[11px] opacity-70 mb-1 font-sans">
          <% meta = [f.object.author.presence, f.object.title.presence&.yield_self { |t| "『#{t}』" }].compact.join(" ") %>
          <%= meta %>
        </div>
        <div id="preview-content-desktop" class="text-lg md:text-2xl font-semibold leading-relaxed whitespace-pre-wrap"></div>
      </div>
    </aside>
  </div> <!-- /grid -->
<% end %>

<%# ====== デスクトップ用：追従ミニプレビュー FAB（右下に出たり消えたり） ====== %>
<div id="preview-fab" class="hidden md:block fixed bottom-6 right-6 z-40 opacity-0 pointer-events-none transition-opacity duration-200">
  <div id="preview-card-fab"
       class="relative rounded-xl border gh-glass p-4 qc-fab shadow-xl"
       style="background:<%= style_bg %>; color:<%= style_text %>; font-family:<%= style_font %>;">
    <div class="absolute inset-0 gh-grain pointer-events-none rounded-xl"></div>
    <div id="preview-meta-fab" class="text-[10px] opacity-70 mb-1 font-sans"></div>
    <div id="preview-content-fab" class="text-sm font-semibold leading-snug clamp-3"></div>
  </div>
</div>

<%# ====== モバイル用：下固定ミニプレビューバー ====== %>
<div class="md:hidden fixed inset-x-0 bottom-0 z-40">
  <div class="mx-auto max-w-7xl px-4" style="padding-bottom: env(safe-area-inset-bottom);">
    <div class="rounded-xl border gh-glass p-3 shadow-lg backdrop-blur">
      <div id="preview-card-mobile"
           class="rounded-lg p-3"
           style="background:<%= style_bg %>; color:<%= style_text %>; font-family:<%= style_font %>; max-height: 28vh; overflow:auto;">
        <div class="text-[10px] opacity-70 mb-1 font-sans" id="preview-meta-mobile"></div>
        <div class="text-base font-semibold leading-relaxed whitespace-pre-wrap" id="preview-content-mobile"></div>
      </div>
      <div class="mt-2 flex justify-end">
        <button type="button" class="btn btn-xs" id="toggle-mobile-preview">展開/収納</button>
      </div>
    </div>
  </div>
</div>
<div class="h-28 md:hidden"></div>

<%# ====== 書籍検索モーダル（そのまま） ====== %>
<dialog id="book-search-modal" class="modal">
  <div class="modal-box max-w-3xl">
    <h3 class="font-bold text-lg mb-4">書籍検索</h3>
    <div class="grid grid-cols-1 md:grid-cols-3 gap-2 mb-3">
      <input type="text" placeholder="タイトル" class="input input-bordered w-full" data-book-search-target="qTitle">
      <input type="text" placeholder="著者"     class="input input-bordered w-full" data-book-search-target="qAuthor">
      <input type="text" placeholder="ISBN"     class="input input-bordered w-full" data-book-search-target="qIsbn">
    </div>
    <div class="flex gap-2 mb-4">
      <button class="btn btn-primary btn-sm" data-action="click->book-search#search">検索</button>
      <button class="btn btn-ghost btn-sm"   data-action="click->book-search#close">閉じる</button>
    </div>
    <div class="overflow-y-auto max-h-[45vh]">
      <ul class="menu w-full" data-book-search-target="results"></ul>
    </div>
  </div>
  <form method="dialog" class="modal-backdrop" data-action="click->book-search#close">
    <button>close</button>
  </form>
</dialog>

<%# ====== 追加スタイル（FABサイズ＆クランプ） ====== %>
<style nonce="<%= content_security_policy_nonce %>">
  .qc-fab{ box-sizing:border-box; width: 320px; max-width: calc(100vw - 24px); height: 132px; }
  @media (max-width: 1200px){ .qc-fab{ width: 300px; height: 124px; } }
  .clamp-3{-webkit-line-clamp:3;display:-webkit-box;-webkit-box-orient:vertical;overflow:hidden}
</style>

<%# ====== プレビュー反映 + “見失ったらFAB”表示制御 ====== %>
<script nonce="<%= content_security_policy_nonce %>">
(function(){
  function setupPreview(){
    const form = document.getElementById("passage-form") || document.querySelector("form");
    if (!form || form.dataset.previewBound === "1") return;
    form.dataset.previewBound = "1";

    // 入力
    const title   = form.querySelector('[data-preview-target="title"]');
    const author  = form.querySelector('[data-preview-target="author"]');
    const body    = form.querySelector('[data-preview-target="content"]');
    const fontSel = form.querySelector('[data-preview-target="font"]');
    const textInp = form.querySelector('[data-preview-target="textColor"]');
    const bgInp   = form.querySelector('[data-preview-target="bgColor"]');
    const textPick= form.querySelector('input[data-colorpicker="textColor"]');
    const bgPick  = form.querySelector('input[data-colorpicker="bgColor"]');

    // プレビュー要素（PC / Mobile / FAB）
    const cardD = document.getElementById('preview-card-desktop');
    const metaD = document.getElementById('preview-meta-desktop');
    const contD = document.getElementById('preview-content-desktop');

    const cardM = document.getElementById('preview-card-mobile');
    const metaM = document.getElementById('preview-meta-mobile');
    const contM = document.getElementById('preview-content-mobile');

    const fabWrap = document.getElementById('preview-fab');
    const cardF = document.getElementById('preview-card-fab');
    const metaF = document.getElementById('preview-meta-fab');
    const contF = document.getElementById('preview-content-fab');

    const anyCard = cardD || cardM || cardF;
    const FALLBACK = {
      font: (anyCard && anyCard.style.fontFamily) || "var(--font-serif)",
      text: (anyCard && anyCard.style.color)      || "#111827",
      bg:   (anyCard && anyCard.style.background) || "#F9FAFB"
    };

    function setCardStyle(el){
      if (!el) return;
      el.style.fontFamily = (fontSel && fontSel.value.trim()) || FALLBACK.font;
      el.style.color      = (textInp && textInp.value.trim()) || FALLBACK.text;
      el.style.background = (bgInp   && bgInp.value.trim())   || FALLBACK.bg;
    }
    function updateMeta(){
      const a = (author?.value || "").trim();
      const t = (title?.value  || "").trim();
      const meta = [a, t ? `『${t}』` : null].filter(Boolean).join(" ");
      if (metaD) metaD.textContent = meta;
      if (metaM) metaM.textContent = meta;
      if (metaF) metaF.textContent = meta;
    }
    function updateBody(){
      const v = (body?.value || "");
      if (contD) contD.textContent = v;
      if (contM) contM.textContent = v;
      if (contF) contF.textContent = v;
    }
    function applyStyleAll(){ setCardStyle(cardD); setCardStyle(cardM); setCardStyle(cardF); }

    function bindPair(textInput, colorInput){
      if (!textInput || !colorInput) return;
      colorInput.addEventListener("input", e => { textInput.value = e.target.value; applyStyleAll(); });
      textInput.addEventListener("input", e => { if (/^#/.test(e.target.value)) colorInput.value = e.target.value; applyStyleAll(); });
    }

    // クイックフォント
    form.querySelectorAll('[data-quick-font]').forEach(btn => {
      btn.addEventListener("click", () => {
        if (!fontSel) return;
        fontSel.value = btn.dataset.quickFont;
        fontSel.dispatchEvent(new Event("change", { bubbles: true }));
      });
    });

    // 最近色の維持（ローカルストレージ）
    function rgbToHex(rgb){ const m = rgb.match(/\d+/g); if(!m) return ""; return "#" + m.slice(0,3).map(n => ("0"+parseInt(n,10).toString(16)).slice(-2)).join(""); }
    function saveRecent(inputEl, hex){
      if (!hex || !hex.startsWith("#")) return;
      const key = inputEl === textInp ? "recent_text" : "recent_bg";
      const arr = JSON.parse(localStorage.getItem(key) || "[]").filter(v => v !== hex);
      arr.unshift(hex); localStorage.setItem(key, JSON.stringify(arr.slice(0,8)));
      renderRecent();
    }
    function renderRecent(){
      const wrapText = form.querySelector('[data-recent="textColor"]');
      const wrapBg   = form.querySelector('[data-recent="bgColor"]');
      const make = (hex, key) => {
        const b = document.createElement("button");
        b.type = "button"; b.title = hex;
        b.className = "size-6 rounded-full border";
        b.style.background = hex;
        b.addEventListener("click", () => {
          const inp = key === "textColor" ? textInp : bgInp;
          const pick= key === "textColor" ? textPick : bgPick;
          if (inp)  inp.value = hex;
          if (pick) pick.value = hex;
          applyStyleAll(); saveRecent(inp, hex);
        });
        return b;
      };
      if (wrapText){ wrapText.innerHTML = ""; (JSON.parse(localStorage.getItem("recent_text") || "[]")).forEach(hex => wrapText.appendChild(make(hex,"textColor"))); }
      if (wrapBg){   wrapBg.innerHTML = "";   (JSON.parse(localStorage.getItem("recent_bg")   || "[]")).forEach(hex => wrapBg.appendChild(make(hex,"bgColor"))); }
    }

    form.querySelectorAll('[data-color-preset]').forEach(btn => {
      btn.addEventListener("click", (e) => {
        const key = e.currentTarget.dataset.colorPreset;
        const val = e.currentTarget.dataset.value;
        const inp = key === "textColor" ? textInp : bgInp;
        const pick= key === "textColor" ? textPick : bgPick;
        if (inp)  inp.value = val;
        if (pick) pick.value = val;
        applyStyleAll(); saveRecent(inp, val);
      });
    });
    form.querySelectorAll('[data-clear-color]').forEach(btn => {
      btn.addEventListener("click", (e) => {
        const key = e.currentTarget.dataset.clearColor;
        const inp = key === "textColor" ? textInp : bgInp;
        if (inp) inp.value = ""; applyStyleAll();
      });
    });
    form.querySelectorAll('[data-pick-current]').forEach(btn => {
      btn.addEventListener("click", (e) => {
        const key = e.currentTarget.dataset.pickCurrent;
        const prop= key === "textColor" ? "color" : "backgroundColor";
        const source = cardD || cardM || cardF;
        const val = source ? rgbToHex(getComputedStyle(source)[prop]) : "";
        const inp = key === "textColor" ? textInp : bgInp;
        const pick= key === "textColor" ? textPick : bgPick;
        if (inp && val) inp.value = val;
        if (pick) pick.value = val;
        applyStyleAll(); saveRecent(inp, val);
      });
    });

    [title, author].forEach(el => el && el.addEventListener("input", updateMeta));
    body && body.addEventListener("input", updateBody);
    fontSel && fontSel.addEventListener("change", applyStyleAll);
    bindPair(textInp, textPick);
    bindPair(bgInp,   bgPick);

    // 初期表示
    updateMeta(); updateBody(); applyStyleAll(); renderRecent();

    // ★ デスクトップ：右プレビューが視界から消えたら FAB を表示
    if ('IntersectionObserver' in window && cardD && fabWrap){
      const io = new IntersectionObserver((entries) => {
        entries.forEach(e => {
          if (e.isIntersecting){
            fabWrap.classList.add('opacity-0','pointer-events-none');
            fabWrap.classList.remove('opacity-100');
          }else{
            fabWrap.classList.remove('opacity-0','pointer-events-none');
            fabWrap.classList.add('opacity-100');
          }
        });
      }, { root: null, threshold: 0.2 });
      io.observe(cardD);
    }

    // モバイル：展開/収納
    const toggleBtn = document.getElementById('toggle-mobile-preview');
    if (toggleBtn && cardM){
      let expanded = true;
      toggleBtn.addEventListener('click', () => {
        expanded = !expanded;
        cardM.style.maxHeight = expanded ? '28vh' : '10vh';
        cardM.style.overflow  = 'auto';
      });
    }
  }

  // Turbo 対応
  document.addEventListener("turbo:load",   setupPreview);
  document.addEventListener("turbo:render", setupPreview);
  if (document.readyState !== "loading") setupPreview();
  else document.addEventListener("DOMContentLoaded", setupPreview);
})();
</script>
